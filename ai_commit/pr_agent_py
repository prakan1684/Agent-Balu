import subprocess
from ai_commit.commit_agent import run_command
import requests
import ollama
import os
import sys


def get_git_diff():
    return run_command(["git", "diff", "--stat", "HEAD"])

def get_changed_files():
    return run_command(["git", "diff", "--name-only", "HEAD"])


def fetch_changes(branch):
    print(f"Fetching changes from branch '{branch}'...")

    try:
        run_command(["git", "fetch", "origin", branch])
        print(f"✅ Successfully fetched branch '{branch}'.")

    except Exception as e:
        print(f"❌ Error fetching branch '{branch}': {str(e)}")
        sys.exit(1)

def get_diff_with_branch(branch):
    try:
        print(f"Comparing current branch with '{branch}'...")
        return run_command(["git", "diff", "--stat", f"origin/{branch}"])
    except Exception as e:
        print(f"❌ Error getting diff with branch '{branch}': {str(e)}")
        sys.exit(1)

def generate_summary(diff):
    try:
        # Truncate large diffs for better performance
        max_length = 5000
        truncated_diff = diff[:max_length] + "..." if len(diff) > max_length else diff

        # Use Ollama to generate the summary
        stream = ollama.chat(
            model="llama3.2:1b",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"Here is the Git diff:\n{truncated_diff}"},
            ],
            stream=True,
        )

        print("✨ Generating summary...")
        summary = ""
        for chunk in stream:
            if not chunk["done"]:
                content = chunk["message"]["content"]
                print(content, end="", flush=True)
                summary += content

        if not summary.strip():
            print("\n❌ No summary generated.")
            sys.exit(1)

        return summary
    except Exception as e:
        print(f"❌ Error generating summary: {str(e)}")
        sys.exit(1)


# Main function to fetch changes and generate a summary
def summarize_changes(target_branch):

    fetch_changes(target_branch)
    # Fetch the diff
    diff = get_diff_with_branch(target_branch)

    if not diff:
        print(f"No changes detected between current branch and '{target_branch}'.")
        sys.exit(0)


    if not diff:
        print("No changes detected. Make sure to stage changes first.")
        sys.exit(0)

    # Generate the summary
    summary = generate_summary(diff)

    # Display the summary
    print("\n\nSummary of Changes:")
    print(summary)
        



system_prompt = """
You are an expert Pull Request assistant specialized in creating detailed, professional, and well-structured pull request descriptions for software development projects. Your goal is to analyze provided code changes (diffs), summarize the changes accurately, and generate a comprehensive pull request template that adheres to best practices.

**Key Objectives:**
1. Create a concise and descriptive title summarizing the overall purpose of the pull request.
2. Generate a detailed description of the changes, explaining their purpose and context clearly.
3. Categorize changes by type (e.g., added, modified, removed) to make the description easier to understand.
4. Highlight key technical details, rationale, and any potential impacts on the codebase.
5. Provide actionable checklists for reviewers and developers, including tasks like testing and documentation updates.
6. Suggest default reviewers and labels based on the nature of the changes.

**Guidelines:**
- Be precise, concise, and use clear language.
- Focus solely on the technical aspects of the changes. Avoid speculative or vague language.
- Follow a structured format for the pull request description.
- Include Markdown formatting to ensure compatibility with GitHub/GitLab/Bitbucket pull request templates.
- If provided with large diffs, summarize them at a high level without omitting critical changes.

**Output Format:**
- The title must be clear, concise, and in title case (e.g., "Refactor Authentication Logic for Improved Security").
- The description should be written in Markdown and follow this template:



"""